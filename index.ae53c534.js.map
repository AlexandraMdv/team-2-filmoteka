{"mappings":"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","sources":["src/js/cards.js","src/js/cards-fetch.js","src/js/api.js","src/js/carousel.js"],"sourcesContent":["export function showMoviesOnPage(movies, genreList) {\n  const container = document.querySelector('.cards-container');\n\n  if (!container) {\n    return;\n  }\n\n  container.innerHTML = '';\n\n  movies.forEach(movie => {\n    const { title, poster_path, genre_ids, release_date } = movie;\n\n    const posterUrl = poster_path\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : '';\n\n    const genres =\n      genre_ids\n        .slice(0, 2)\n        .map(id => genreList[id])\n        .join(', ') || 'N/A';\n\n    const year = release_date ? new Date(release_date).getFullYear() : 'N/A';\n\n    container.innerHTML += `\n      <div class=\"movie-card\">\n        ${\n          posterUrl\n            ? `<img src=\"${posterUrl}\" alt=\"${title}\" class=\"movie-poster\">`\n            : ''\n        }\n        <div class=\"movie-info\">\n          <h3 class=\"movie-title\">${title.toUpperCase()}</h3>\n          <p class=\"movie-meta\">${genres} | ${year}</p>\n        </div>\n      </div>\n    `;\n  });\n}\n","import { TRENDING_MOVIES_URL } from './api.js';\nimport { GENRES_URL } from './api.js';\nimport { showMoviesOnPage } from './cards.js';\n\nlet pageNumber = 1;\nlet totalPages = 20;\nlet genreList = {};\nconst paginationContainer = document.getElementById('pagination');\n\nasync function fetchGenres() {\n  try {\n    const response = await fetch(GENRES_URL);\n    const data = await response.json();\n    genreList = Object.fromEntries(\n      data.genres.map(genre => [genre.id, genre.name])\n    );\n  } catch (error) {\n    console.error('Error fetching genres:', error);\n  }\n}\n\nasync function fetchMovies(page) {\n  try {\n    const response = await fetch(TRENDING_MOVIES_URL(page));\n    if (!response.ok) throw new Error('Failed to fetch movies');\n    const data = await response.json();\n    totalPages = Math.min(data.total_pages, 20);\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n    return [];\n  }\n}\n\nasync function loadMovies(page) {\n  pageNumber = page;\n  const movies = await fetchMovies(page);\n  showMoviesOnPage(movies, genreList);\n  renderPagination();\n}\n\nfunction renderPagination() {\n  paginationContainer.innerHTML = '';\n\n  createButton('left', pageNumber > 1, () => loadMovies(pageNumber - 1));\n\n  if (pageNumber > 3) {\n    createButton('1', true, () => loadMovies(1));\n    addDots();\n  }\n\n  for (\n    let i = Math.max(1, pageNumber - 2);\n    i <= Math.min(totalPages, pageNumber + 2);\n    i++\n  ) {\n    createButton(i, i !== pageNumber, () => loadMovies(i), i === pageNumber);\n  }\n\n  if (pageNumber < totalPages - 2) {\n    addDots();\n    createButton(totalPages, true, () => loadMovies(totalPages));\n  }\n\n  createButton('right', pageNumber < totalPages, () =>\n    loadMovies(pageNumber + 1)\n  );\n}\n\nfunction createButton(text, enabled, onClick, active = false) {\n  const button = document.createElement('button');\n  button.textContent = text;\n  button.className = active ? 'page-num active' : 'page-num';\n  button.disabled = !enabled;\n\n  if (text === 'left' || text === 'right') {\n    const img = document.createElement('img');\n    img.src =\n      text === 'left'\n        ? './images/icons.svg#icon-arrow-left'\n        : './images/icons.svg#icon-arrow-right';\n    img.alt = text === 'left' ? 'Previous' : 'Next';\n    img.className = 'pagination-icon';\n    button.appendChild(img);\n  } else {\n    button.textContent = text;\n\n    if (enabled) button.addEventListener('click', onClick);\n    paginationContainer.appendChild(button);\n  }\n}\n\nfunction addDots() {\n  const span = document.createElement('span');\n  span.textContent = '...';\n  span.className = 'dots';\n  paginationContainer.appendChild(span);\n}\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  await fetchGenres();\n  loadMovies(1);\n});\n","const ENDPOINT = 'https://api.themoviedb.org/';\nconst API_KEY = '918aba14d75940fa7e0d80373b9ee894';\n\nexport const TRENDING_MOVIES_URL = (page = 1) =>\n  `${ENDPOINT}3/trending/movie/day?api_key=${API_KEY}&language=en-US&page=${page}`;\nexport const GENRES_URL = `${ENDPOINT}3/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n","const API_KEY = '918aba14d75940fa7e0d80373b9ee894';\nconst API_URL = `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n\nconst carouselMovies = document.querySelector('.carousel-movies');\nconst prevBtn = document.querySelector('.prev-btn');\nconst nextBtn = document.querySelector('.next-btn');\n\n\nlet movies = [];\nlet currentIndex = 0;\n\nasync function fetchMovies() {\n  const response = await fetch(API_URL);\n  const data = await response.json();\n  movies = data.results;\n  displayMovies();\n}\n\nfunction displayMovies() {\n  carouselMovies.innerHTML = '';\n  movies.forEach((movie) => {\n    const movieEl = document.createElement('div');\n    movieEl.classList.add('movie');\n    movieEl.innerHTML = `\n      <img src=\"https://image.tmdb.org/t/p/w500${movie.poster_path}\" alt=\"${movie.title}\">\n      \n    `;\n    // I think we only need images of the trending movies\n    //<h3>${movie.title}</h3>\n    //<p class=\"rating\">${'â˜…'.repeat(Math.round(movie.vote_average / 2))}</p>\n    carouselMovies.appendChild(movieEl);\n  });\n  updateCarousel();\n}\n\nfunction updateCarousel() {\n  const movieWidth = document.querySelector('.movie').offsetWidth;\n  //220px is not the width of each movie card, it is dinamically calculate by min-width: calc(100% / 5) so we need the offsetWidth to find out the width which changes depending on viewport width\n  const offset = currentIndex * -movieWidth; // 220px is the width of each movie + gap\n  carouselMovies.style.transform = `translateX(${offset}px)`;\n}\n\nprevBtn.addEventListener('click', () => {\n  if (currentIndex > 0) {\n    currentIndex--;\n    updateCarousel();\n  }\n});\n\nnextBtn.addEventListener('click', () => {\n  const movieWidth = document.querySelector('.movie').offsetWidth; // Calculate dynamic image width\n  console.log(movieWidth);\n  \n  const containerWidth = carouselMovies.offsetWidth;\n  console.log(containerWidth);\n  \n  \n  const maxIndex = Math.round((movies.length * movieWidth - containerWidth) / movieWidth);\n  console.log(maxIndex);\n  \n  \n  if (currentIndex < maxIndex) {\n    currentIndex++;\n    console.log(currentIndex);\n    \n    updateCarousel();\n  }\n});\n\nfetchMovies();\n"],"names":["$4b5d526dcb235765$export$285ee038151fce75","movies","genreList","container","document","querySelector","innerHTML","forEach","movie","title","poster_path","genre_ids","release_date","posterUrl","genres","slice","map","id","join","year","Date","getFullYear","toUpperCase","$fb9992a0d268adee$var$pageNumber","$fb9992a0d268adee$var$totalPages","$fb9992a0d268adee$var$genreList","$fb9992a0d268adee$var$paginationContainer","getElementById","async","$fb9992a0d268adee$var$loadMovies","page","response","fetch","ok","Error","data","json","Math","min","total_pages","results","error","console","$fb9992a0d268adee$var$fetchMovies","$fb9992a0d268adee$var$createButton","$fb9992a0d268adee$var$addDots","i","max","$fb9992a0d268adee$var$renderPagination","text","enabled","onClick","active","button","createElement","textContent","className","disabled","img","src","alt","appendChild","addEventListener","span","Object","fromEntries","genre","name","$fb9992a0d268adee$var$fetchGenres","$0d260286e6b745c0$var$carouselMovies","$0d260286e6b745c0$var$prevBtn","$0d260286e6b745c0$var$nextBtn","$0d260286e6b745c0$var$movies","$0d260286e6b745c0$var$currentIndex","$0d260286e6b745c0$var$updateCarousel","movieWidth","offsetWidth","offset","style","transform","log","containerWidth","maxIndex","round","length","movieEl","classList","add","$0d260286e6b745c0$var$fetchMovies"],"version":3,"file":"index.ae53c534.js.map"}